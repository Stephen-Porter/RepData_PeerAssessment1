str(apply)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
str(x)
apply(x, 1, sum)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
x <- matrix(1:20, 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(rep, 1:4, 4:1)
str(mapply)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
list(noise(1, 1, 2), noise(2, 2, 2),
noise(3, 3, 2), noise(4, 4, 2),
noise(5, 5, 2))
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10, 1));x
f <- gl(3, 10);f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
str(tapply(x, f, mean))
str(tapply(x, f, mean, simplify = FALSE))
tapply(x, f, range)
str(split)
?gl
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x, f)
lapply(split(x, f), mean)
library(datasets)
head(airquality)
ls()
s <- split(airquality, airquality$Month)
s
str(s)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")],
na.rm = TRUE))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")],na.rm = TRUE))
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
x;f1;f2
x
f1
f2
interaction(f1, f2)
?interaction
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = TRUE))
str(split(x, list(f1, f2), drop = TRUE))
log(-1)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
}
printmessage(1)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(NA)
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(NA)
printmessage2(NA)
printmessage2(1)
printmessage2(-11)
x <- log(-1)
printmessage2(X)
printmessage2(log(-1))
printmessage2(x)
mean(x)
rm(x)
rm(x)
traceback()
mean(x)
mean(x)
traceback()
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
options(error = recover)
read.csv("nosuchfile")
2
library("rmarkdown", lib.loc="C:/Program Files/R/R-3.2.2/library")
source('~/.active-rstudio-document', echo=TRUE)
#Subsetting
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
X[,1]
X[,"var1"]
X[1:2,"var2"]
# Logicals ands and ors
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 | X$var3 > 15),]
# sorting
X[which(X$var2 > 8),] #ignores NAs
X
(X$var1 <= 3 | X$var3 > 15)
agricultureLogical = (df$ACR == 3 & df$AGS == 6)
agricultureLogical <- (df$ACR = 3 & df$AGS = 6)
agricultureLogical <- df$ACR == 3 & df$AGS == 6
df$ACR == 3
agricultureLogical <- is.true(df$ACR == 3 & df$AGS == 6)
agricultureLogical <- is.true(df$ACR == 3 & df$AGS == 6)
agricultureLogical <- is.logical(df$ACR == 3 & df$AGS == 6)
agricultureLogical <- df$ACR == 3 #& df$AGS == 6)
agricultureLogical <- (df$ACR == 3 & df$AGS == 6)
swirl()
library(swirl)
swirl()
library(dplyr)
activity <- read.csv("activity.csv")
head(activity)
setwd("~/Data/Coursera/RepRe/Ass1_Due_10_18_15/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
head(activity)
View(activity)
library(lubridate)
mutate(activity, date = ymd(date()))
mutate(activity, date = ymd(date))
summary(activity)
class(activity$date)
act <- mutate(activity, date = ymd(date))
act
glimpse(act)
tabble(act$date)
table(act$date)
str(act)
